# Utility script to make a video, starting from several .png files generated by the evolution
# by Alberto Tonda, 2016 <alberto.tonda@gmail.com>

import argparse
import matplotlib
import re as regex
import sys
matplotlib.use("Agg") # I don't really know what it does...

import matplotlib.animation as manimation        
import matplotlib.pyplot as plt

def loadPoints(fileName) :
	
	X = []
	Y = []

	with open(fileName, "r") as fp :
		
		lines = fp.readlines()
		
		lines.pop(0) # remove header
		
		for line in lines :
			tokens = line.rstrip().split(',')
			X.append( float(tokens[0]) )
			Y.append( float(tokens[1]) )
	
	return X, Y

def loadArchive(fileName) :

	X = []
	Y = []

	with open(fileName, "r") as fp :
		
		lines = fp.readlines()
		
		lines.pop(0) # remove header
		
		for line in lines :
			tokens = line.rstrip().split(',')
			X.append( float(tokens[0]) )
			Y.append( float(tokens[1]) )
	
	return X, Y


def plotPoints(ax, X, Y, pointsHandler, writer) :
	
	objectHandler = None
	if pointsHandler == None :
		objectHandler, = ax.plot(X, Y, 'bo', label='MOEA population') # plot blue dots 'bo'
	else :
		objectHandler = pointsHandler
		objectHandler.set_xdata(X)
		objectHandler.set_ydata(Y)
	
	# in any case, the axis must be set
	# at least for the number of nodes, the axis can be set automatically starting from the points
	#ax.axis([0.0, 2500.0, 0.0, 400.0])
		
	return objectHandler

def plotArchivePoints(ax, X, Y, pointsHandler, writer) :
	
	objectHandler = None
	if pointsHandler == None :
		objectHandler, = ax.plot(X, Y, 'ro', label='MOEA archive') # plot red dots 'ro'
	else :
		objectHandler = pointsHandler
		objectHandler.set_xdata(X)
		objectHandler.set_ydata(Y)
	
	# in any case, the axis must be set
	#ax.axis([0.0, 2500.0, 0.0, 400.0])
		
	return objectHandler

def sortFileNames( fileNames ) :
	
	print("I will operate on filenames:", fileNames)

	# sort filenames by ascending order
	# - use regex to find number in filename
	# - create list of tuples, [filename, int]
	# - sort on the second element of the tuple
	listOfTuples = []

	for f in fileNames :
		
		match = regex.search("([0-9]+)\.csv", f)
		if not match : 
			sys.stderr.write("Error: filenames do not contain a numeric id, impossible to sort them. Aborting...\n")
			sys.exit(0)
		
		numericId = int(match.group(1))
		
		listOfTuples.append( [f, numericId] )

	listOfTuples = sorted(listOfTuples, key=lambda a : a[1])
	print("listOfTuples=", listOfTuples)

	# once the files are sorted, add them to the video one by one
	sortedFileNames = [ x[0] for x in listOfTuples ]
	
	return sortedFileNames


# TODO: maybe in the future move all code that plot the heuristics to this point
def plotHeuristics(ax, highdegFileName, sdiscFileName) :
	
	return


def main() :
	
	# some default values
	#highdegFile = "../heuristic-results/GrQc-WC-HIGHDEG-high_front.txt"
	#sdiscFile = "../heuristic-results/GrQc-WC-SDISC-high_front.txt"
	highdegFile = "../heuristic-results/Wiki-WC-HIGHDEG-high_front.txt"
	sdiscFile = "../heuristic-results/Wiki-WC-SDISC-high_front.txt"
	
	# initialize argparse and parse arguments
	parser = argparse.ArgumentParser(description="Python script that evolves candidate seed nodes for an influence maximization problem in a social network, given a target graph and an influence propagation model.\nBy Doina Bucur, Giovanni Iacca, Andrea Marcelli, Giovanni Squillero, Alberto Tonda, 2016 <alberto.tonda@gmail.com>")	
	parser.add_argument("-p", "--points", nargs='+', help="List of CSV files, containing an header, and then the fitness values for solutions in each generation.", required=True)
	parser.add_argument("-a", "--archives", nargs='+', help="List of CSV files, containing an header, and then the archived fitness values, generation by generation.")
	# TODO: add add_argument to add parts with the heuristics (?), one for highdeg, the other for sdisc?
	
	args = parser.parse_args()

	# initialize FFMpeg writer that will create the video
	FFMpegWriter = manimation.writers['ffmpeg']
	metadata = dict(title='MOEA on influence maximization', artist='Matplotlib', comment='Whoa')
	writer = FFMpegWriter(fps=3, metadata=metadata, bitrate=1800)

	# get the list of data points to transform into frames
	fileNames = sortFileNames( args.points )
	archiveNames = []
	if args.archives : archiveNames = sortFileNames( args.archives )

	fig = plt.figure()
	ax = plt.subplot(111)
	#ax.set_autoscale_on(False)
	ax.set_xlabel("influence")
	ax.set_ylabel("nodes in the seed set")

	# let's also plot the two heuristics
	if "highdegFile" in vars() :
		x = []
		y = []
		with open(highdegFile, "r") as fp :
			lines = fp.readlines()
			header = lines.pop(0)
			
			for line in lines :
				tokens = line.rstrip().split(' ')
				x.append( float(tokens[0]) )
				y.append( float(tokens[1]) )

		ax.plot(y, x, 'g.', label="HIGHDEG heuristic")
		print("Found %d points of the HIGHDEG heuristic..." % len(x))
		print("x=", x)
		print("y=", y)

	if "sdiscFile" in vars() :
		x = []
		y = []
		with open(sdiscFile, "r") as fp :
			lines = fp.readlines()
			header = lines.pop(0)
			
			for line in lines :
				tokens = line.rstrip().split(' ')
				x.append( float(tokens[0]) )
				y.append( float(tokens[1]) )

		ax.plot(y, x, 'y.', label="SDISC heuristic")
		print("Found %d points of the SDISC heuristic..." % len(x))

	pointsHandler = None # initially, the handler for the points is NULL
	archivesHandler = None # initially, the handler for the points is NULL  
	totalEvaluations = 0 # let's keep track of the total evaluations

	with writer.saving(fig, "test.mp4", 150) :
		
		for i, f in enumerate(fileNames) :
			print("Processing frame " + str(i+1) + "/" + str(len(fileNames)) + "...")

			# open file, load points
			X, Y = loadPoints(f)
			# plot points
			pointsHandler = plotPoints(ax, X, Y, pointsHandler, writer)
			
			# this part is called only if the archive file list exists
			Xa = []
			if i < len(archiveNames) :
				Xa, Ya = loadPoints(archiveNames[i])
				archivesHandler = plotArchivePoints(ax, Xa, Ya, archivesHandler, writer)
		
			# update title and legend
			totalEvaluations += len(X)
			ax.set_title("Evaluations=%d, Archive=%d" % (totalEvaluations, len(Xa)))
			ax.legend(loc='best')

			# grab current frame
			writer.grab_frame()
			
			# not only, but save stuff (it will generate A LOT of PDFs, though...)
			# plt.savefig("test-figure-%d.pdf" % (i+1))

if __name__ == "__main__" :
	sys.exit(main())
